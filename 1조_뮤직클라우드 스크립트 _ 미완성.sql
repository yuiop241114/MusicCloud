DROP TABLE BOARD;
DROP TABLE BOARD_CONTENT;
DROP TABLE CART;
DROP TABLE FRIEND_LIST;
DROP TABLE LOCATION;
DROP TABLE MEMBER;
DROP TABLE MUSIC_COMMENT;
DROP TABLE MUSIC_FILE;
DROP TABLE MUSIC_LIST;
DROP TABLE PAYMENT_DETAIL;
DROP TABLE PLAYLIST;
DROP TABLE PLAYLIST_DETAIL;
DROP TABLE RECENT_MUSIC;
DROP TABLE RECOMMEND_LIST;
------------

CREATE TABLE MEMBER 
     ( 
	   MEMBER_NO NUMBER PRIMARY KEY      
     , LOCATION_NO NUMBER REFERENCES LOCATION                  
     , MEMBER_ID VARCHAR2(20) NOT NULL            
     , MEMBER_PWD VARCHAR2(20) NOT NULL           
     , MEMBER_NAME VARCHAR2(30) NULL              
     , EMAIL VARCHAR2(30) NOT NULL                
     , GENDER CHAR(1) NOT NULL                    
     , AGE NUMBER NOT NULL                        
     , STATUS CHAR(1) DEFAULT 'Y' NOT NULL        
     , ENROLL_DATE DATE DEFAULT SYSDATE NOT NULL  
     , REPORT_COUNT NUMBER NULL                   
     );           

CREATE TABLE LOCATION
     (
       LOCATION_NO NUMBER PRIMARY KEY
     , LOCATION_NAME VARCHAR2(20) NOT NULL
     );

CREATE TABLE FRIEND_LIST
     (
       FRIEND_NO NUMBER PRIMARY KEY
     , MEMBER_NO NUMBER REFERENCES MEMBER NOT NULL
     , PLAYLIST_NO NUMBER REFERENCES PLAYLIST NOT NULL
     );

-- CREATE TABLE RECENT_MUSIC �̰͵� �ζ��� �ȸ���
--      (
--        MEMBER_NO NUMBER REFERENCES MEMBER(MEMBER_NO) NOT NULL
--      ,  MUSIC_NO NUMBER REFERENCES MUSIC_FILE(MUSIC_NO) NOT NULL
--     );
     
 CREATE TABLE 
 RECENT_MUSIC
            (
              MEMBER_NO NUMBER NOT NULL
            , MUSIC_NO NUMBER NOT NULL
            , CONSTRAINT FK_RECENT_MUSIC_MEMBER_NO FOREIGN KEY (MEMBER_NO) REFERENCES MEMBER(MEMBER_NO)
            , CONSTRAINT FK_RECENT_MUSIC_MUSIC_NO FOREIGN KEY (MUSIC_NO) REFERENCES MUSIC_FILE(MUSIC_NO)
);


CREATE TABLE PAYMENT_DETAIL
     (
       MEMBER_NO NUMBER REFERENCES MEMBER NOT NULL
     , SUBSCRIBE_STATUS CHAR(1) DEFAULT 'Y' NOT NULL
     , SUBSCRIBE_START_ENROLL DATE DEFAULT SYSDATE
     , SUBSCRIBE_END_DATE DATE 
     );

---------------------------------------------------------


CREATE TABLE 
       BOARD 
           ( 
             BOARD_NO NUMBER CONSTRAINT PK_BOARD PRIMARY KEY
           , PLAYLIST_NO NUMBER CONSTRAINT FK_BOARD_PLAYLIST_NO REFERENCES PLAYLIST(PLAYLIST_NO) NOT NULL
           , MEMBER_NO NUMBER CONSTRAINT FK_BOARD_MEMBER_NO REFERENCES MEMBER(MEMBER_NO) NOT NULL
           , MUSIC_NO NUMBER CONSTRAINT FK_BOARD_MUSIC_NO REFERENCES MUSIC_FILE(MUSIC_NO) NOT NULL 
           , BOARD_TITLE VARCHAR2(90) NOT NULL
           , BOARD_CONTENT VARCHAR2(4000) NOT NULL
           , BOARD_COUNT NUMBER NULL
           , BOARD_ENROLL_DATE DATE DEFAULT SYSDATE NOT NULL
           , BOARD_STATUS CHAR(1) DEFAULT 'Y' NOT NULL
           , BOARD_CATEGORY VARCHAR2(30) NOT NULL
           );

-- CREATE TABLE    �ζ��� ��� �ȸ��� 
--BOARD_COMMENT
--           (
--             BOARD_COMMENT_NO NUMBER CONSTRAINT PK_BOARD_COMMENT_NO PRIMARY KEY
--          , BOARD_NO NUMBER CONSTRAINT FK_BOARD_COMMENT_NO REFERENCES BOARD_NO(BOARD_NO) NOT NULL
--           , MEMBER_NO NUMBER CONSTRAINT FK_BOARD_COMMENT_MEMBER_NO REFERENCES MEMBER(MEMBER_NO) NOT NULL
--           , COMMENT_CONTENT VARCHAR2(600)
--          , COMMENT_ENROLL_DATE DATE
--           );
--      
    CREATE TABLE 
   BOARD_COMMENT
                (
                  BOARD_COMMENT_NO NUMBER NOT NULL
                , BOARD_NO NUMBER NOT NULL
                , MEMBER_NO NUMBER NOT NULL
                , COMMENT_CONTENT VARCHAR2(600)
                , COMMENT_ENROLL_DATE DATE
                , CONSTRAINT PK_BOARD_COMMENT_NO PRIMARY KEY (BOARD_COMMENT_NO)
                , CONSTRAINT FK_BOARD_COMMENT_NO FOREIGN KEY (BOARD_NO) REFERENCES BOARD(BOARD_NO)
                , CONSTRAINT FK_BOARD_COMMENT_MEMBER_NO FOREIGN KEY (MEMBER_NO) REFERENCES MEMBER(MEMBER_NO)
);

           
CREATE TABLE
        CART 
           (
             MEMBER_NO NUMBER CONSTRAINT PK_CART_MEMBER_NO PRIMARY KEY
           , MUSIC_NO NUMBER CONSTRAINT FK_CART_MUSIC_NO REFERENCES MUSIC_LIST(MUSIC_NO) NOT NULL
           , PLAYLIST_NO NUMBER CONSTRAINT FK_CART_PLAYLIST_NO REFERENCES PLAYLIST(PLAYLIST_NO) NOT NULL
           );
           
CREATE TABLE
    PLAYLIST
           (
             PLAYLIST_NO NUMBER CONSTRAINT PK_PLAYLIST_NO PRIMARY KEY
           , MEMBER_NO NUMBER CONSTRAINT FK_PLAYLIST_MEMBER_NO REFERENCES MEMBER(MEMBER_NO) NOT NULL
           , PLAYLIST_NAME VARCHAR2(90) NOT NULL
           , PLAYLIST_STATUS CHAR(1) DEFAULT 'Y' NOT NULL
           );

     CREATE TABLE
  PLAYLIST_DETAIL
                (
                  PLAYLIST_NO NUMBER CONSTRAINT PK_PLAYLIST_DETAIL_NO PRIMARY KEY
                , PLAYLIST_MUSIC_TOTAL VARCHAR2(4000) NOT NULL 
                );
           
           
           --------
           
           
           CREATE TABLE MUSIC_LIST 
    (
      MUSIC_NO      NUMBER         NOT NULL
    , MUSIC_TITLE   VARCHAR2(30)   NOT NULL
    , MUSIC_SINGER  VARCHAR2(30)   NOT NULL 
    , MUSIC_COUNT   NUMBER         NOT NULL 
    , MUSIC_GENRE   VARCHAR2(20)   NOT NULL
    , MUSIC_LIKE    NUMBER         NULL 
    , MUSIC_DISLIKE NUMBER         NULL 
    , LYRICS        VARCHAR2(4000) NULL 
    , MUSIC_STATUS  CHAR(1)        DEFAULT 'Y' NOT NULL
    , CONSTRAINT PK_MUSIC_LIST PRIMARY KEY (MUSIC_NO)
    );

CREATE TABLE MUSIC_COMMENT 
    (
      MUSIC_COMMENT_NO NUMBER PRIMARY KEY  
    , MUSIC_NO NUMBER NOT NULL             
    , MEMBER_NO NUMBER NOT NULL            
    , COMMENT_TEXT VARCHAR2(600 CHAR) NOT NULL 
    , COMMENT_LIKE NUMBER                  
    , COMMENT_DISLIKE NUMBER              
    , COMMENT_DATE DATE                     
    );

CREATE TABLE MUSIC_FILE 
    (
      MUSIC_NO NUMBER NOT NULL                 
    , MUSIC_FILE_ORIGIN_NAME VARCHAR2(30) NOT NULL 
    , MUSIC_FILE_EDIT_NAME VARCHAR2(30) NOT NULL  
    , MUSIC_FILE_STORE_PATH VARCHAR2(30) NOT NULL 
    , MUSIC_IMAGE_ORIGIN_NAME VARCHAR2(30)       
    , MUSIC_IMAGE_EDIT_NAME VARCHAR2(30)        
    , MUSIC_IMAGE_PATH VARCHAR2(30)              
    , CONSTRAINT PK_MUSIC_FILE PRIMARY KEY (MUSIC_NO) 
    );
    
CREATE TABLE RECOMMEND_LIST
    (
      MEMBER_NO NUMBER NOT NULL
    , PLAYLIST_NO NUMBER NOT NULL 
    );

